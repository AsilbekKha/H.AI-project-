import streamlit as st
import joblib
import pandas as pd
from catboost import Pool

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏)
model_reg = joblib.load("model_reg.pkl")
model_clf = joblib.load("model_clf.pkl")

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
cat_features = ['Gender', 'Weekday']

# –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∫–∞–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏
feature_order = ['Weekday', 'Entry_Minutes', 'Exit_Minutes', 'Age', 'Gender']

st.title("üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–∞–ª–æ–Ω–µ")

st.markdown("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–∑–∏—Ç–∞ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∑–∏—Ç–∞.")

# –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
gender = st.selectbox("–ü–æ–ª –∫–ª–∏–µ–Ω—Ç–∞", ["Male", "Female"])
weekday = st.selectbox("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤–∏–∑–∏—Ç–∞", ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"])

entry_hour = st.slider("–ß–∞—Å –≤—Ö–æ–¥–∞ (0-23)", 0, 23, 10)
entry_minute = st.slider("–ú–∏–Ω—É—Ç—ã –≤—Ö–æ–¥–∞ (0-59)", 0, 59, 30)
exit_hour = st.slider("–ß–∞—Å –≤—ã—Ö–æ–¥–∞ (0-23)", 0, 23, 11)
exit_minute = st.slider("–ú–∏–Ω—É—Ç—ã –≤—ã—Ö–æ–¥–∞ (0-59)", 0, 59, 0)

age = st.slider("–í–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞", 18, 70, 30)

# –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã –æ—Ç –Ω–∞—á–∞–ª–∞ —Å—É—Ç–æ–∫
entry_minutes = entry_hour * 60 + entry_minute
exit_minutes = exit_hour * 60 + exit_minute

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
if exit_minutes < entry_minutes:
    st.error("–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞.")
else:
    if st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å"):

        input_data = {
            'Weekday': weekday,
            'Entry_Minutes': entry_minutes,
            'Exit_Minutes': exit_minutes,
            'Age': age,
            'Gender': gender
        }
        X_input = pd.DataFrame([input_data])
        X_input = X_input[feature_order]

        for cat_col in cat_features:
            X_input[cat_col] = X_input[cat_col].astype('category')

        input_pool = Pool(X_input, cat_features=cat_features)

        # –†–µ–≥—Ä–µ—Å—Å–∏—è: –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–∑–∏—Ç–∞
        duration_pred = model_reg.predict(input_pool)[0]

        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∑–∏—Ç–∞
        repeat_visit_proba = model_clf.predict_proba(input_pool)[0][1]
        repeat_visit_pred = int(repeat_visit_proba >= 0.5)

        st.subheader("üïí –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–∑–∏—Ç–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö):")
        st.write(f"{duration_pred / 60:.1f} –º–∏–Ω—É—Ç")  # –ü–µ—Ä–µ–≤–æ–¥ –∏–∑ —Å–µ–∫—É–Ω–¥ –≤ –º–∏–Ω—É—Ç—ã

        st.subheader("üîÅ –í–µ—Ä–Ω—ë—Ç—Å—è –ª–∏ –∫–ª–∏–µ–Ω—Ç –≤ –±—É–¥—É—â–µ–º?")
        st.write("**–î–∞**" if repeat_visit_pred == 1 else "**–ù–µ—Ç**")
        st.write(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –≤–µ—Ä–Ω—ë—Ç—Å—è: {repeat_visit_proba:.2%}")
